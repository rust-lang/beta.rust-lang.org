{{#*inline "page"}}

<header id="cli-header">
  <div class="container">
    <h1>Write Solid Command Line Applications</h1>

    <h1 class="subtitle">
      Thanks to a great ecosystem that promotes best practices and easy distribution, you can get started with writing CLI apps
      in Rust in no time.
    </h1>
  </div>
</header>

<section id="cli-features">
  <div class="container">
    <div class="row">
      <article class="four columns box">
        <h2>Distribution</h2>
        <p class="box-content">
          Compile everything down to a single binary, no need for your users to have a runtime installed.
        </p>
        <p class="button button-secondary">
          <a href="#">Learn more &rarr;</a>
        </p>
      </article>
      <article class="four columns box">
        <h2>Argument parsing</h2>
        <p class="box-content">
          Get the best practices for argument parsing with great help messages and configuration files that work cross-platform without
          boilerplate code.
        </p>
        <p class="button button-secondary">
          <a href="#">Learn more &rarr;</a>
        </p>
      </article>
      <article class="four columns box">
        <h2>Super solid</h2>
        <p class="box-content">
          Even if all you want to write is a short one-off script: You can be confident it's fast, easily testable, and gives useful
          error messages.
        </p>
        <p class="button button-secondary">
          <a href="#">Learn more &rarr;</a>
        </p>
      </article>
    </div>
  </div>
</section>

<section id="cli-quotes">
  <div class="container">
    <article>
      <h2>Rust CLI application in production</h2>

      <div>
        <h3>Sentry's CLI</h3>
        <blockquote>"Rust is awesome and fun and you should use it"</blockquote>
        <p>
          <a href="https://www.youtube.com/watch?v=2Xu6EdEBa5E">Watch Armin Ronacher's talk at PolyConf 17</a>
        </p>
      </div>
    </article>
  </div>
</section>

<section id="cli-use-it">
  <div class="container">
    <div class="row">
      <article class="six columns box">
        <h2>Define your inputs</h2>
        <pre><code>/// Read some lines of a file
#[derive(Clap)]
struct Cli {
    file: PathBuf,
    #[clap(short="n")]
    num: i32,
}</code></pre>
      </article>

      <article class="six columns box">
        <h2>Write your tool</h2>
        <pre><code>use quicli::prelude::*;

fn main() -> CliResult {
    let args = Cli::from_args()?:
    read_file(&args.file)?
        .lines()
        .take(args.count)
        .for_each(|line| println!("{}", line));
}</code></pre>
      </article>
    </div>
  </div>
</section>

{{/inline}} {{~> (parent)~}}